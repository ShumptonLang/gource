#summary Creating videos with Gource.

*Note*: Command line options below should work with *Gource 0.27 and later*. If you have an older version I suggest [http://code.google.com/p/gource/downloads/list upgrading].

I suggest you also check out the [http://code.google.com/p/gource/wiki/Controls Controls] section of the wiki for steps to customize the look of Gource for your videos.

== Recording Videos ==

=== General ===

You can create a video of Gource using the `-o` (aka `--output-ppm-stream`) option. This creates an uncompressed sequence of screenshots in PPM format which can then be processed by a video encoder (such as `ffmpeg`) to produce a video.

You can also adjust the output frame rate with `-r` (aka `--output-framerate`). Note you will need to adjust the frame rate used by the encoder (eg `ffmpeg -r`) to match, unless you are going for a speed-up timelapse or slow motion effect.

Make sure you keep the window of Gource entirely visible while recording. If you minimize or partially obscure the window, your video card may decide not draw the output consistently and you will get artifacts in your recording. You may like to use the `-f` option to run in full-screen mode to stop this happening.

You may want to record your video in widescreen as that is the trend for online video now days. You can record in 720p by adding `-1280x720` to the command line.

=== Linux / Mac ===

==FFmpeg using x264 codec==

The below command lines will create a video at 60fps using the [http://en.wikipedia.org/wiki/X264 x264] codec in an mp4 container.

This assumes you have recent version of ffmpeg *with libx264 support*. Some distributions like Ubuntu do not enable libx264 support by default in ffmpeg (See [http://ubuntuforums.org/showthread.php?t=1117283 this thread] for various ways to [http://ubuntuforums.org/showthread.php?t=1117283 enable libx264 support on Ubuntu]). Consult guides for your distribution if this is the case.

In one command (raw video piped directly into ffmpeg):

{{{
gource -1280x720 -o - | ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i - -vcodec libx264 -preset ultrafast -crf 1 -threads 0 -bf 0 gource.mp4
}}}

As two commands:

{{{
gource -1280x720 -o gource.ppm
ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i gource.ppm -vcodec libx264 -preset ultrafast -crf 1 -threads 0 -bf 0 gource.mp4
}}}

This one has the advantage of keeping the raw video file (gource.ppm) so you can go back and tweak the encoding parameters if you don't like the output quality or need a different video format without recording the video again. The disadvantage is that this raw uncompressed video and you can expect it to use up 100gs of gigs, so keep that in mind!

You can interchange the extension 'mp4' with 'mkv' or 'avi' to get ffmpeg to use a different container format for the video. 'avi' is typically discouraged for long videos as their is a 2GB file limit associated with that format.

*Note*: *ffmpeg seems to be a constantly moving target*, so you may find you need slightly different arguments with your version. There is a good guide to using x264 with ffmpeg [https://wiki.archlinux.org/index.php/FFmpeg here].

==FFmpeg using WebM codec==

A good alternative codec to x264 is [http://en.wikipedia.org/wiki/WebM WebM]. Below is a very basic command line example of using ffmpeg to produce a Gource WebM video:

{{{
gource -1280x720 -o - | ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i - -vcodec libvpx -b 10000K gource.webm
}}}

=== Windows ===

On Windows if you aren't too fussed about the precision of the output, you might want to try a direct video capture program like [http://www.fraps.com Fraps]. Fraps works with any program that uses OpenGL or Direct3D and is pretty fast (you can capture Gource at 60fps with no slow down in many cases).

If you don't want to use an external capture program, here is an example command-line using the built in PPM frame capture support, using ffmpeg to generate a video:

{{{
gource -1280x720 -o gource.ppm C:\\path\\to\\code\\repository
C:\\ffmpeg\\bin\\ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i gource.ppm -vcodec libx264 -preset ultrafast -crf 1 -threads 0 -bf 0 gource.x264.avi
}}}

You can interchange the extension 'avi' with 'mp4' or 'mkv' to get ffmpeg to use a different container format for the video. 'avi' is typically discouraged for long videos as their is a 2GB file limit associated with that format.

You can get an `ffmpeg` build for Windows from [http://ffmpeg.zeranoe.com/ here]. 

*Note*: *ffmpeg seems to be a constantly moving target*, so you may find you need slightly different arguments with your version. There is a good guide to using x264 with ffmpeg [https://wiki.archlinux.org/index.php/FFmpeg here].

== Videos ==

Video showing off the new Bloom effect:

<wiki:video url="http://www.youtube.com/watch?v=NjUuAuBcoqs">

A collage of different open source software projects displayed using Gource:

<wiki:video url="http://www.youtube.com/watch?v=E5xPMW5fg48">

== Examples ==

Various videos of projects created with Gource.


=== Torchlight II ===

<wiki:video url="http://www.youtube.com/watch?v=byNjZvZfvAM">

=== Trade Me ===

<wiki:video url="http://www.youtube.com/watch?v=34j9SvtYShQ">

=== Koha Library System ===

<wiki:video url="http://www.youtube.com/watch?v=Tl1a2VN_pec">

=== JmonkeyEngine ===

<wiki:video url="http://www.youtube.com/watch?v=rh7uo2gxLdA">

=== Real Racing 2 ===

<wiki:video url="http://www.youtube.com/watch?v=Wco8rAxk7AY">

=== OpenOffice ===

<wiki:video url="http://www.youtube.com/watch?v=a-gAoYapM8U">

=== PHP ===

<wiki:video url="http://www.youtube.com/watch?v=jhbzEwxbCfI">

=== Homebrew ===

<wiki:video url="http://www.youtube.com/watch?v=ZX0xCWANfW4">

=== Lugaru ===

<wiki:video url="http://www.youtube.com/watch?v=bNTN0IbPas0">

=== CHIP Online (chip.de) ===

<wiki:video url="http://www.youtube.com/watch?v=fV5kKUYchpk">

=== AmigaOS ===

<wiki:video url="http://www.youtube.com/watch?v=5NJ1TlQwLTs">

=== RGN Vietnam Mod === 

<wiki:video url="http://www.youtube.com/watch?v=fQjRf8qepoE">

=== JBoss EJB 3 ===

<wiki:video url="http://www.youtube.com/watch?v=w1q-vtcYYWE">

=== OpenLDAP Development History === 

<wiki:video url="http://www.youtube.com/watch?v=4sClZGLZ6dY">

=== ArtBabble ===

<wiki:video url="http://www.youtube.com/watch?v=KgCuU8DpNG8">

=== PHProjekt 6 ===

<wiki:video url="http://www.youtube.com/watch?v=zUB3MTp1T0o">

=== Diplomarbeit ===

<wiki:video url="http://www.youtube.com/watch?v=AvG--rQxYWk">

== Git ===

<wiki:video url="http://www.youtube.com/watch?v=GTMC3g2Xy8c">